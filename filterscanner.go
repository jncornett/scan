package scan

// Filter is the signature of the function used by FilterScanner to filter
// scanned tokens.
type Filter func(View) bool

// FilterScanner implements the Scanner interface by filtering the tokens from
// a backing Scanner. If Filter is unset, it is equivalent to setting Filter to
//     func(View) bool { return true }
type FilterScanner struct {
	// Scanner is the backing scanner that is filtered by Filter
	Scanner
	// Filter is a function that is used to filter the tokens generated by the
	// backing scanner.
	Filter
}

// Bytes calls the underlying Bytes function on the backing Scanner.
func (s FilterScanner) Bytes() []byte { return s.Scanner.Bytes() }

// Err calls the underlying Err function on the backing Scanner.
func (s FilterScanner) Err() error { return s.Scanner.Err() }

// Text calls the underlying Text function on the backing Scanner.
func (s FilterScanner) Text() string { return s.Scanner.Text() }

// Scan repeatedly calls the Scan function on the underlying Scanner until
// the filter returns true or the underlying call to Scan returns false,
// whichever occurs first.
func (s FilterScanner) Scan() bool {
	for s.Scanner.Scan() {
		if s.Filter == nil {
			return true
		}
		if s.Filter(s.Scanner) {
			return true
		}
	}
	return false
}
